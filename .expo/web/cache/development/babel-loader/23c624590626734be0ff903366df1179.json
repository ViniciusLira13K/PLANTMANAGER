{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\vlira\\\\Desktop\\\\Lira_pes\\\\nlw5\\\\PLANTMANAGER\\\\src\\\\pages\\\\PlantSelect.tsx\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { EnviromentButton } from \"../components/EnviromentButton\";\nimport { Header } from \"../components/Header\";\nimport { PlantCardPrimary } from \"../components/PlantCardPrimary\";\nimport { Load } from \"../components/Load\";\nimport api from \"../services/api\";\nimport colors from \"../styles/colors\";\nimport fonts from \"../styles/fonts\";\nexport function PlantSelect() {\n  var _this = this;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      enviroments = _useState2[0],\n      setEnviroments = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      plants = _useState4[0],\n      setPlants = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      filteredPlants = _useState6[0],\n      setFilteredPlants = _useState6[1];\n\n  var _useState7 = useState('all'),\n      _useState8 = _slicedToArray(_useState7, 2),\n      environmentsSelected = _useState8[0],\n      setEnvironmentsSelected = _useState8[1];\n\n  var _useState9 = useState(true),\n      _useState10 = _slicedToArray(_useState9, 2),\n      loading = _useState10[0],\n      setLoading = _useState10[1];\n\n  var _useState11 = useState(1),\n      _useState12 = _slicedToArray(_useState11, 2),\n      page = _useState12[0],\n      setPage = _useState12[1];\n\n  var _useState13 = useState(false),\n      _useState14 = _slicedToArray(_useState13, 2),\n      loadingMore = _useState14[0],\n      setLoadingMore = _useState14[1];\n\n  var _useState15 = useState(false),\n      _useState16 = _slicedToArray(_useState15, 2),\n      loadedAll = _useState16[0],\n      setLoadedAll = _useState16[1];\n\n  function handleEnvironmenteSelected(enviroments) {\n    setEnvironmentsSelected(enviroments);\n    if (enviroments == 'all') return setFilteredPlants(plants);\n    var filtered = plants.filter(function (plant) {\n      return plant.environments.includes(enviroments);\n    });\n    setFilteredPlants(filtered);\n  }\n\n  function fetchPlants() {\n    var _await$api$get, data;\n\n    return _regeneratorRuntime.async(function fetchPlants$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(api.get(\"plants?_sort=name&_order=asc&_page=\" + page + \"&_limit=8\"));\n\n          case 2:\n            _await$api$get = _context.sent;\n            data = _await$api$get.data;\n\n            if (data) {\n              _context.next = 6;\n              break;\n            }\n\n            return _context.abrupt(\"return\", setLoading(true));\n\n          case 6:\n            if (page > 1) {\n              setPlants(function (oldValue) {\n                return [].concat(_toConsumableArray(oldValue), _toConsumableArray(data));\n              });\n              setFilteredPlants(function (oldValue) {\n                return [].concat(_toConsumableArray(oldValue), _toConsumableArray(data));\n              });\n            } else {\n              setPlants(data);\n              setFilteredPlants(data);\n            }\n\n            setLoading(false);\n            setLoadingMore(false);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function handleFetchMore(distance) {\n    if (distance < 1) return;\n    setLoadingMore(true);\n    setPage(function (oldValue) {\n      return oldValue + 1;\n    });\n    fetchPlants();\n  }\n\n  useEffect(function () {\n    function fetchEnviroment() {\n      var _await$api$get2, data;\n\n      return _regeneratorRuntime.async(function fetchEnviroment$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(api.get('plants_environments?_sort=title&_order=asc'));\n\n            case 2:\n              _await$api$get2 = _context2.sent;\n              data = _await$api$get2.data;\n              setEnviroments([{\n                key: 'all',\n                title: 'Todos'\n              }].concat(_toConsumableArray(data)));\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n\n    fetchEnviroment();\n  }, []);\n  useEffect(function () {\n    fetchPlants();\n  }, []);\n  if (loading) return React.createElement(Load, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 16\n    }\n  });\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: styles.header,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  }, React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 17\n    }\n  }), React.createElement(Text, {\n    style: styles.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 17\n    }\n  }, \"Em qual ambiente\"), React.createElement(Text, {\n    style: styles.subtitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 17\n    }\n  }, \"vo\\xE7\\xEA quer colocar sua planta?\")), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  }, React.createElement(FlatList, {\n    data: enviroments,\n    keyExtractor: function keyExtractor(item) {\n      return item.key;\n    },\n    renderItem: function renderItem(_ref) {\n      var item = _ref.item;\n      return React.createElement(EnviromentButton, {\n        title: item.title,\n        active: item.key === environmentsSelected,\n        onPress: function onPress() {\n          return handleEnvironmenteSelected(item.key);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 25\n        }\n      });\n    },\n    horizontal: true,\n    showsHorizontalScrollIndicator: false,\n    contentContainerStyle: styles.enviromentList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 17\n    }\n  })), React.createElement(View, {\n    style: styles.plants,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }\n  }, React.createElement(FlatList, {\n    data: filteredPlants,\n    renderItem: function renderItem(_ref2) {\n      var item = _ref2.item;\n      return React.createElement(PlantCardPrimary, {\n        data: item,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 25\n        }\n      });\n    },\n    showsVerticalScrollIndicator: false,\n    numColumns: 2,\n    contentContainerStyle: styles.contentContainerStyle,\n    onEndReachedThreshold: 0.1,\n    onEndReached: function onEndReached(_ref3) {\n      var distanceFromEnd = _ref3.distanceFromEnd;\n      handleFetchMore(distanceFromEnd);\n    },\n    ListFooterComponent: loadingMore ? React.createElement(ActivityIndicator, {\n      color: colors.green,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 27\n      }\n    }) : React.createElement(React.Fragment, null),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 17\n    }\n  })));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.background\n  },\n  header: {\n    paddingHorizontal: 30\n  },\n  title: {\n    fontSize: 18,\n    color: colors.heading,\n    fontFamily: fonts.heading,\n    lineHeight: 20,\n    marginTop: 15\n  },\n  subtitle: {\n    fontFamily: fonts.text,\n    fontSize: 17,\n    lineHeight: 20,\n    color: colors.heading\n  },\n  enviromentList: {\n    height: 40,\n    justifyContent: 'center',\n    paddingBottom: 5,\n    marginLeft: 32,\n    marginVertical: 32\n  },\n  plants: {\n    flex: 1,\n    paddingHorizontal: 32,\n    justifyContent: 'center'\n  },\n  contentContainerStyle: {}\n});","map":{"version":3,"sources":["C:/Users/vlira/Desktop/Lira_pes/nlw5/PLANTMANAGER/src/pages/PlantSelect.tsx"],"names":["React","useEffect","useState","EnviromentButton","Header","PlantCardPrimary","Load","api","colors","fonts","PlantSelect","enviroments","setEnviroments","plants","setPlants","filteredPlants","setFilteredPlants","environmentsSelected","setEnvironmentsSelected","loading","setLoading","page","setPage","loadingMore","setLoadingMore","loadedAll","setLoadedAll","handleEnvironmenteSelected","filtered","filter","plant","environments","includes","fetchPlants","get","data","oldValue","handleFetchMore","distance","fetchEnviroment","key","title","styles","container","header","subtitle","item","enviromentList","contentContainerStyle","distanceFromEnd","green","StyleSheet","create","flex","backgroundColor","background","paddingHorizontal","fontSize","color","heading","fontFamily","lineHeight","marginTop","text","height","justifyContent","paddingBottom","marginLeft","marginVertical"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport {\r\n    View,\r\n    Text,\r\n    StyleSheet,\r\n    FlatList,\r\n    ActivityIndicator\r\n} from 'react-native';\r\nimport { EnviromentButton } from '../components/EnviromentButton';\r\n\r\n\r\nimport { Header } from '../components/Header';\r\nimport { PlantCardPrimary } from '../components/PlantCardPrimary';\r\nimport { Load } from '../components/Load';\r\n\r\nimport api from '../services/api';\r\n\r\nimport colors from '../styles/colors';\r\nimport fonts from '../styles/fonts';\r\n\r\ninterface EnviromentProps {\r\n    key: string;\r\n    title: string;\r\n}\r\n\r\ninterface PlantsProps {\r\n    id: string;\r\n    name: string;\r\n    about: string;\r\n    water_tips: string;\r\n    photo: string;\r\n    environments: [string];\r\n    frequency: {\r\n        times: number;\r\n        repeat_every: string;\r\n      }\r\n}\r\nexport function PlantSelect(){\r\n    const [enviroments, setEnviroments] = useState<EnviromentProps[]>();\r\n    const [plants, setPlants] = useState<PlantsProps[]>();\r\n    const [filteredPlants, setFilteredPlants] = useState<PlantsProps[]>();\r\n    const [environmentsSelected, setEnvironmentsSelected] = useState('all');\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    const [page, setPage] = useState(1);\r\n    const [loadingMore, setLoadingMore] = useState(false);\r\n    const [loadedAll, setLoadedAll] = useState(false);\r\n\r\n    function handleEnvironmenteSelected(enviroments: string){\r\n        setEnvironmentsSelected(enviroments)\r\n\r\n        if( enviroments == 'all' )\r\n            return setFilteredPlants(plants);\r\n        \r\n        const filtered = plants.filter(plant => \r\n                plant.environments.includes(enviroments)\r\n            );\r\n\r\n            setFilteredPlants(filtered);\r\n    }\r\n    \r\n    async function fetchPlants() {\r\n        const { data } = await api\r\n        .get(`plants?_sort=name&_order=asc&_page=${page}&_limit=8`);\r\n\r\n        if(!data){\r\n            return setLoading(true);\r\n        } \r\n        if(page > 1){\r\n\r\n            setPlants(oldValue => [...oldValue, ...data]);\r\n            \r\n            setFilteredPlants(oldValue => [...oldValue, ...data]);\r\n        } else {\r\n            setPlants(data);\r\n            setFilteredPlants(data);\r\n        }\r\n        setLoading(false);\r\n        setLoadingMore(false);\r\n    }\r\n\r\n    function handleFetchMore(distance: number){\r\n        if(distance < 1)\r\n            return;\r\n\r\n        setLoadingMore(true);\r\n        setPage(oldValue => oldValue + 1);\r\n        fetchPlants();\r\n    }\r\n\r\n    useEffect(() => {\r\n        async function fetchEnviroment() {\r\n            const { data } = await api\r\n            .get('plants_environments?_sort=title&_order=asc');\r\n            setEnviroments([\r\n                {\r\n                    key: 'all',\r\n                    title: 'Todos',\r\n                },\r\n                ...data\r\n            ]);\r\n        }\r\n        fetchEnviroment();\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        \r\n        fetchPlants();\r\n    },[])\r\n\r\n    if(loading)\r\n        return <Load/>\r\n    return(\r\n        <View style={styles.container}>\r\n            <View style={styles.header}>\r\n                <Header/>\r\n\r\n                <Text style={styles.title}>\r\n                    Em qual ambiente\r\n                </Text>\r\n                <Text style={styles.subtitle}>\r\n                    voçê quer colocar sua planta?\r\n                </Text>\r\n            </View>\r\n            <View>\r\n                <FlatList\r\n                    data={enviroments}\r\n                    keyExtractor={item => item.key}\r\n                    renderItem={({item}) => (\r\n                        <EnviromentButton \r\n                            title={item.title} \r\n                            active={item.key === environmentsSelected}\r\n                            onPress={() => handleEnvironmenteSelected(item.key)}\r\n                        />\r\n                    )}\r\n                    horizontal\r\n                    showsHorizontalScrollIndicator={false}\r\n                    contentContainerStyle={styles.enviromentList}\r\n                />\r\n            </View>\r\n            <View \r\n            style={styles.plants}\r\n            >\r\n                <FlatList\r\n                    data={filteredPlants}\r\n                    renderItem={({item}) =>(\r\n                        <PlantCardPrimary\r\n                            data={item}\r\n                        />\r\n                    )}\r\n                    showsVerticalScrollIndicator={false}\r\n                    numColumns={2}\r\n                    contentContainerStyle={styles.contentContainerStyle}\r\n                    onEndReachedThreshold={0.1}\r\n                    onEndReached={({ distanceFromEnd }) => {\r\n                        handleFetchMore(distanceFromEnd);\r\n                    }}\r\n                    ListFooterComponent={\r\n                        loadingMore\r\n                        ? <ActivityIndicator color={colors.green}/>\r\n                        : <></>\r\n                    }\r\n                />\r\n\r\n            </View>\r\n        </View>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        backgroundColor: colors.background\r\n    },\r\n    header: {\r\n        paddingHorizontal: 30\r\n    },\r\n    title: {\r\n        fontSize: 18,\r\n        color: colors.heading,\r\n        fontFamily: fonts.heading,\r\n        lineHeight: 20,\r\n        marginTop: 15\r\n    },\r\n    subtitle: {\r\n        fontFamily: fonts.text,\r\n        fontSize: 17,\r\n        lineHeight: 20,\r\n        color: colors.heading\r\n    },\r\n    enviromentList: {\r\n        height: 40,\r\n        justifyContent: 'center',\r\n        paddingBottom: 5,\r\n        marginLeft: 32,\r\n        marginVertical:32\r\n    },\r\n    plants: {\r\n        flex: 1,\r\n        paddingHorizontal: 32,\r\n        justifyContent: 'center'\r\n    },\r\n    contentContainerStyle: {\r\n        \r\n    }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}